{"version":3,"sources":["components/PostsList.tsx","utils/fetchClient.ts","api/comments.ts","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/CommentsList.tsx","components/PostDetails.tsx","components/UserSelector.tsx","api/users.ts","api/posts.ts","App.tsx","index.tsx"],"names":["PostsList","posts","onSelectPost","selectedPost","length","className","map","post","id","title","type","classNames","onClick","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","getComments","postId","sendComment","comment","deleteComment","commentId","Loader","NewCommentForm","onChangeComment","isLoading","useState","name","setName","email","setEmail","setBody","hasErrorName","setHasErrorName","hasErrorEmail","setHasErrorEmail","hasErrorBody","setHasErrorBody","htmlFor","placeholder","value","onChange","ev","target","required","preventDefault","onFormSubmit","CommentList","comments","onDeleteComment","href","PostDetails","setComments","hasError","setHasError","isLoadingComments","setIsLoadingComments","isWillNewComment","setIsWillNewComment","newComment","setNewComment","isLoadingNewComment","setIsLoadingNewComment","a","commentsFromServer","commentToServer","sendedComment","Error","useEffect","loadComments","sendNewCommentToServer","filter","UserSelector","users","selectedUser","onSelectUser","isMenuOpened","setIsMenuOpened","current","role","user","getUsers","getPosts","userId","App","setUsers","setPosts","isLoadingPosts","setIsLoadingPosts","setSelectedUser","setSelectedPost","usersFromServer","postsFromServer","loadUsers","loadUsersPosts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.02ada6f6.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Post } from '../types/Post';\n\nexport type Props = {\n  posts: Post[],\n  onSelectPost: React.Dispatch<React.SetStateAction<Post | null>>,\n  selectedPost: Post | null,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  onSelectPost,\n  selectedPost,\n}) => {\n  return (\n    <>\n      {posts.length > 0 ? (\n        <div data-cy=\"PostsList\">\n          <p className=\"title\">Posts:</p>\n\n          <table\n            className=\"table is-fullwidth is-striped is-hoverable is-narrow\"\n          >\n            <thead>\n              <tr className=\"has-background-link-light\">\n                <th>#</th>\n                <th>Title</th>\n                <th> </th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {posts.map(post => (\n                <tr data-cy=\"Post\" key={post.id}>\n                  <td data-cy=\"PostId\">\n                    {post.id}\n                  </td>\n\n                  <td data-cy=\"PostTitle\">\n                    {post.title}\n                  </td>\n\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      type=\"button\"\n                      data-cy=\"PostButton\"\n                      className={classNames(\n                        'button is-link', { 'is-light': selectedPost !== post },\n                      )}\n                      onClick={() => {\n                        onSelectPost(selectedPost === post ? null : post);\n                      }}\n                    >\n                      {selectedPost === post ? 'Close' : 'Open'}\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      ) : (\n        <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n          No posts yet\n        </div>\n      )}\n    </>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { client } from '../utils/fetchClient';\nimport { Comment } from '../types/Comment';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const sendComment = (comment: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', comment);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { CommentData } from '../types/Comment';\n\nexport type Props = {\n  onChangeComment: React.Dispatch<React.SetStateAction<CommentData\n  | null | undefined>>,\n  isLoading: boolean,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  onChangeComment,\n  isLoading,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const [hasErrorName, setHasErrorName] = useState(false);\n  const [hasErrorEmail, setHasErrorEmail] = useState(false);\n  const [hasErrorBody, setHasErrorBody] = useState(false);\n\n  const onChangeName = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    setHasErrorName(false);\n    setName(ev.target.value);\n  };\n\n  const onChangeEmail = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    setHasErrorEmail(false);\n    setEmail(ev.target.value);\n  };\n\n  const onChangeBody = (ev: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setHasErrorBody(false);\n    setBody(ev.target.value);\n  };\n\n  // проблема что можно не ввести имейл\n\n  const onClearForm = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n\n    setHasErrorName(false);\n    setHasErrorEmail(false);\n    setHasErrorBody(false);\n  };\n\n  const onFormSubmit = (ev:\n  React.MouseEvent<HTMLButtonElement,\n  MouseEvent>) => {\n    ev.preventDefault();\n\n    if (!name) {\n      setHasErrorName(true);\n    }\n\n    if (!email) {\n      setHasErrorEmail(true);\n    }\n\n    if (!body) {\n      setHasErrorBody(true);\n    }\n\n    if (name && email && body) {\n      onChangeComment({\n        name,\n        email,\n        body,\n      });\n\n      setBody('');\n\n      setHasErrorName(false);\n      setHasErrorEmail(false);\n      setHasErrorBody(false);\n    }\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\">\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': hasErrorName })}\n            value={name}\n            onChange={onChangeName}\n            required\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {hasErrorName && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {hasErrorName && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"email\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', { 'is-danger': hasErrorEmail })}\n            value={email}\n            onChange={onChangeEmail}\n            required\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {hasErrorEmail && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {hasErrorEmail && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', { 'is-danger': hasErrorBody })}\n            value={body}\n            onChange={onChangeBody}\n            required\n          />\n        </div>\n\n        {hasErrorBody && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link', { 'is-loading': isLoading },\n            )}\n            onClick={(ev) => onFormSubmit(ev)}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={onClearForm}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\nimport { Comment } from '../types/Comment';\n\nexport type Props = {\n  comments: Comment[],\n  onDeleteComment(id: number): void,\n};\n\nexport const CommentList: React.FC<Props> = ({ comments, onDeleteComment }) => {\n  return (\n    <>\n      {(comments.length > 0) ? (\n        <>\n          <p className=\"title is-4\">Comments:</p>\n\n          {comments.map(comment => (\n            <article\n              className=\"message is-small\"\n              data-cy=\"Comment\"\n              key={comment.id}\n            >\n              <div className=\"message-header\">\n                <a\n                  href={`mailto:${comment.email}`}\n                  data-cy=\"CommentAuthor\"\n                >\n                  {comment.name}\n                </a>\n                <button\n                  data-cy=\"CommentDelete\"\n                  type=\"button\"\n                  className=\"delete is-small\"\n                  aria-label=\"delete\"\n                  onClick={() => onDeleteComment(comment.id)}\n                >\n                  delete button\n                </button>\n              </div>\n\n              <div className=\"message-body\" data-cy=\"CommentBody\">\n                {comment.body}\n              </div>\n            </article>\n          ))}\n        </>\n      ) : (\n        <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n          No comments yet\n        </p>\n      )}\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { getComments, sendComment, deleteComment } from '../api/comments';\nimport { Post } from '../types/Post';\nimport { Comment, CommentData } from '../types/Comment';\n\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { CommentList } from './CommentsList';\n\nexport type Props = {\n  post: Post,\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [hasError, setHasError] = useState(false);\n  const [isLoadingComments, setIsLoadingComments] = useState(false);\n  const [isWillNewComment, setIsWillNewComment] = useState(false);\n\n  const [newComment, setNewComment] = useState<CommentData | null>();\n  const [isLoadingNewComment, setIsLoadingNewComment] = useState(false);\n\n  async function loadComments() {\n    setIsLoadingComments(true);\n\n    try {\n      const commentsFromServer = await getComments(post.id);\n\n      setComments(commentsFromServer);\n    } catch {\n      setHasError(true);\n    } finally {\n      setIsLoadingComments(false);\n    }\n  }\n\n  useEffect(() => {\n    setComments([]);\n    loadComments();\n    setIsWillNewComment(false);\n  }, [post]);\n\n  async function sendNewCommentToServer(comment: CommentData) {\n    setIsLoadingNewComment(true);\n\n    try {\n      const commentToServer: Omit<Comment, 'id'> = {\n        ...comment,\n        postId: post.id,\n      };\n\n      const sendedComment = await sendComment(commentToServer);\n\n      setComments([\n        ...comments,\n        sendedComment,\n      ]);\n    } catch {\n      throw new Error('can not load new comment from server');\n    } finally {\n      setIsLoadingNewComment(false);\n    }\n  }\n\n  useEffect(() => {\n    if (newComment) {\n      sendNewCommentToServer(newComment);\n    }\n  }, [newComment]);\n\n  const onDeleteComment = async (commentId: number) => {\n    try {\n      await deleteComment(commentId);\n\n      setComments(comments.filter(comment => comment.id !== commentId));\n    } catch {\n      throw new Error('can not delete comment');\n    }\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post.id}: ${post.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoadingComments && <Loader />}\n\n          {comments && !isLoadingComments && (\n            <CommentList\n              comments={comments}\n              onDeleteComment={onDeleteComment}\n            />\n          )}\n\n          {hasError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {!isWillNewComment && !isLoadingComments && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsWillNewComment(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isWillNewComment && (\n          <NewCommentForm\n            onChangeComment={setNewComment}\n            isLoading={isLoadingNewComment}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { User } from '../types/User';\n\nexport type Props = {\n  users: User[],\n  selectedUser: User | null,\n  onSelectUser: React.Dispatch<React.SetStateAction<User | null>>,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  onSelectUser,\n}) => {\n  const [isMenuOpened, setIsMenuOpened] = useState(false);\n\n  const onChangeMenu = () => {\n    setIsMenuOpened(current => !current);\n  };\n\n  const userTogging = (person: User) => {\n    onSelectUser(person);\n    setIsMenuOpened(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', { 'is-active': isMenuOpened })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={onChangeMenu}\n        >\n          <span>\n            {selectedUser ? selectedUser.name : 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={classNames(\n                'dropdown-item', { 'is-active': selectedUser?.id === user.id },\n              )}\n              onClick={() => userTogging(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\n\nimport { getUsers } from './api/users';\nimport { getPosts } from './api/posts';\n\nimport { Post } from './types/Post';\nimport { User } from './types/User';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [hasError, setHasError] = useState(false);\n  const [isLoadingPosts, setIsLoadingPosts] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  async function loadUsers() {\n    try {\n      const usersFromServer = await getUsers();\n\n      setUsers(usersFromServer);\n    } catch {\n      throw new Error('Unable to load users from server');\n    }\n  }\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  async function loadUsersPosts(user: User) {\n    setIsLoadingPosts(true);\n\n    try {\n      const postsFromServer = await getPosts(user.id);\n\n      setPosts(postsFromServer);\n    } catch (error) {\n      setHasError(true);\n      throw new Error('Unable to load posts from server');\n    } finally {\n      setIsLoadingPosts(false);\n    }\n  }\n\n  useEffect(() => {\n    if (selectedUser) {\n      loadUsersPosts(selectedUser);\n    }\n\n    setSelectedPost(null);\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  onSelectUser={setSelectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoadingPosts && <Loader />}\n\n                {hasError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {selectedUser && !isLoadingPosts && (\n                  <PostsList\n                    posts={posts}\n                    onSelectPost={setSelectedPost}\n                    selectedPost={selectedPost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && <PostDetails post={selectedPost} />}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}